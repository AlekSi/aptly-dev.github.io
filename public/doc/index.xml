<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Docs on aptly - Debian repository management tool </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://www.aptly.info/doc/index.xml</link>
    <language>en-us</language>
    <author>Andrey Smirnov</author>
    
    <updated>Fri, 29 Aug 2014 11:17:38 UTC</updated>
    
    <item>
      <title>aptly mirror edit</title>
      <link>http://www.aptly.info/doc/aptly/mirror/edit</link>
      <pubDate>Fri, 29 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://www.aptly.info/doc/aptly/mirror/edit</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;aptly mirror edit&lt;/h2&gt;

&lt;p&gt;Command edit allows to change mirror settings: filter query, whether
to include dependencies while filtering, list of architectures to process.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly mirror edit &amp;lt;name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Params are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; is a mirror name (given when mirror was created)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Flags:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-filter=&lt;/code&gt;: &lt;a href=&#34;/doc/feature/query/&#34;&gt;package query&lt;/a&gt; which is applied to
packages in the mirror, set to empty to disable filtering&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-filter-with-deps=false&lt;/code&gt;: when filtering, include dependencies of
matching packages as well&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-architectures=&lt;/code&gt;: global flag to change architectures list.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-with-sources=false&lt;/code&gt;: download source packages in addition to
binary packages&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-with-udebs=false&lt;/code&gt;: download .udeb packages (Debian installer
support)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to apply new filtering settings, &lt;a href=&#34;/doc/aptly/mirror/update/&#34;&gt;update&lt;/a&gt;
mirror.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly mirror edit -filter=nginx -filter-with-deps wheezy-main
Mirror [wheezy-main]: http://mirror.yandex.ru/debian/ wheezy successfully updated.

$ aptly mirror edit -architectures=i386,amd64 sensu
Downloading http://repos.sensuapp.org/apt/dists/sensu/Release...
Mirror [sensu]: http://repos.sensuapp.org/apt/ sensu successfully updated.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>aptly mirror search</title>
      <link>http://www.aptly.info/doc/aptly/mirror/search</link>
      <pubDate>Fri, 29 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://www.aptly.info/doc/aptly/mirror/search</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;aptly mirror search&lt;/h2&gt;

&lt;p&gt;Search mirror for packages matching query.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly mirror search &amp;lt;name&amp;gt; &amp;lt;package-query&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Params are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; is a mirror name (given when mirror was created)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;package-query&lt;/code&gt; is a &lt;a href=&#34;/doc/feature/query/&#34;&gt;package query&lt;/a&gt; to
search for packages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Flags:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-with-deps=false&lt;/code&gt;: include dependencies of matching packages
into search results&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly mirror search wheezy &#39;Name (% nginx*), $Architecture (i386), !Name (% *-dbg)&#39;
nginx-full_1.2.1-2.2+wheezy2_i386
nginx-extras_1.2.1-2.2+wheezy2_i386
nginx-light_1.2.1-2.2+wheezy2_i386
nginx-common_1.2.1-2.2+wheezy2_all
nginx-doc_1.2.1-2.2+wheezy2_all
nginx-naxsi-ui_1.2.1-2.2+wheezy2_all
nginx_1.2.1-2.2+wheezy2_all
nginx-naxsi_1.2.1-2.2+wheezy2_i386
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>aptly package</title>
      <link>http://www.aptly.info/doc/aptly/package</link>
      <pubDate>Fri, 29 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://www.aptly.info/doc/aptly/package</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;aptly package&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;aptly package&lt;/code&gt; family of command perform operation on the whole
collection of packages in apty database.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>aptly package search</title>
      <link>http://www.aptly.info/doc/aptly/package/search</link>
      <pubDate>Fri, 29 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://www.aptly.info/doc/aptly/package/search</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;aptly package search&lt;/h2&gt;

&lt;p&gt;Search whole package database for packages matching query.
Whole database of packages includes all packages (deduplicated)
from all the mirrors, local repos and snapshots.&lt;/p&gt;

&lt;p&gt;In order to get more detailed information about the package,
use &lt;a href=&#34;/doc/aptly/package/show/&#34;&gt;&lt;code&gt;aptly package show&lt;/code&gt;&lt;/a&gt; command.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly package search &amp;lt;package-query&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Params are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;package-query&lt;/code&gt; is a &lt;a href=&#34;/doc/feature/query/&#34;&gt;package query&lt;/a&gt; to
search for packages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly package search &#39;Version (&amp;gt;=1.2.3-2), Version (&amp;lt;1.2.3-3)&#39;
libibmad-dev_1.2.3-20090314-1.1_amd64
libibumad-dev_1.2.3-20090314-1.1_i386
libibumad1_1.2.3-20090314-1.1_amd64
libibumad1_1.2.3-20090314-1.1_i386
libghc-uuid-dev_1.2.3-2+b3_amd64
python-mysqldb_1.2.3-2_i386
libibumad-dev_1.2.3-20090314-1.1_amd64
libibmad_1.2.3-20090314-1.1_source
python-mysqldb_1.2.3-2_amd64
jpegoptim_1.2.3-2+b2_i386
libghc-uuid-doc_1.2.3-2_all
libjibx1.2-java-doc_1.2.3-2_all
bwbar_1.2.3-2_amd64
libghc-certificate-doc_1.2.3-2_all
haskell-certificate_1.2.3-2_source
bwbar_1.2.3-2_i386
jpegoptim_1.2.3-2_source
libghc-certificate-dev_1.2.3-2_amd64
libibmad1_1.2.3-20090314-1.1_i386
libibmad-dev_1.2.3-20090314-1.1_i386
libjibx1.2-java_1.2.3-2_source
python-mysqldb-dbg_1.2.3-2_i386
shush_1.2.3-2_i386
moksha.common_1.2.3-2~bpo70+1_source
libghc-certificate-prof_1.2.3-2_i386
libghc-uuid-prof_1.2.3-2+b3_amd64
libghc-uuid-prof_1.2.3-2+b4_i386
shush_1.2.3-2_source
libghc-certificate-prof_1.2.3-2_amd64
libjibx1.2-java_1.2.3-2_all
libjibx-java_1.2.3-2_all
libghc-uuid-dev_1.2.3-2+b4_i386
python-mysqldb_1.2.3-2_source
haskell-uuid_1.2.3-2_source
libibumad_1.2.3-20090314-1.1_source
libghc-certificate-dev_1.2.3-2_i386
jpegoptim_1.2.3-2+b2_amd64
python-moksha.common_1.2.3-2~bpo70+1_all
bwbar_1.2.3-2_source
python-mysqldb-dbg_1.2.3-2_amd64
libibmad1_1.2.3-20090314-1.1_amd64
shush_1.2.3-2_amd64
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>aptly package show</title>
      <link>http://www.aptly.info/doc/aptly/package/show</link>
      <pubDate>Fri, 29 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://www.aptly.info/doc/aptly/package/show</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;aptly package show&lt;/h2&gt;

&lt;p&gt;Display details about packages from whole package database. Command
show does searching much like &lt;a href=&#34;/doc/aptly/package/search/&#34;&gt;&lt;code&gt;aptly package search&lt;/code&gt;&lt;/a&gt;
command does, but displays complete information about the package:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;contents of control file&lt;/li&gt;
&lt;li&gt;(optionally) information about package files in the pool&lt;/li&gt;
&lt;li&gt;(optionally) list of mirrors, local repos and snapshots that reference (include) this package&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is possible to submit any search query to this command, but it is much more common
to have queries resulting in single package.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly package show &amp;lt;package-query&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Params are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;package-query&lt;/code&gt; is a &lt;a href=&#34;/doc/feature/query/&#34;&gt;package query&lt;/a&gt; to
search for packages (most usually in the format of package
reference, e.g. &lt;code&gt;bwbar_1.2.3-2_amd64&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Flags:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-with-files=false&lt;/code&gt;: display list of package files in the package pool&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-with-references=false&lt;/code&gt;: display list of mirrors, snapshots and local repos
which reference this package.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly package show -with-files -with-references bwbar_1.2.3-2_source
Package: bwbar
Version: 1.2.3-2
Priority: source
Section: net
Maintainer: Julien Danjou &amp;lt;acid@debian.org&amp;gt;
Architecture: any
Format: 1.0
Build-Depends: debhelper (&amp;gt;&amp;gt; 7.0.0), libpng12-dev, cdbs
Files: 138ba54405656adc16c882839482795e 54582 bwbar_1.2.3-2.diff.gz
 cd4f216514cf38f42be9d7b35d429adc 1586 bwbar_1.2.3-2.dsc
 766265ddf0615b552ff19d12f78be719 34142 bwbar_1.2.3.orig.tar.gz
Checksums-Sha1: c5259d7fc3ac750d9d9b8d458d702a1bc49a708e 54582 bwbar_1.2.3-2.diff.gz
 674a6f5db91e83f9ad4f30d1563d3249aa21bb39 1586 bwbar_1.2.3-2.dsc
 13f5a17658a5c5adbb0db5b0fdd88805d6b3158b 34142 bwbar_1.2.3.orig.tar.gz
Directory: pool/main/b/bwbar
Binary: bwbar
Standards-Version: 3.9.2
Checksums-Sha256: 1ae625e6a29b745d24bab9185692ecc5b17cb4624d2019ae9a94e08a89f15edb 54582 bwbar_1.2.3-2.diff.gz
 b2d022dd912bc1129b0d0e216b7f8e587649582578484c776bcbe81afe993879 1586 bwbar_1.2.3-2.dsc
 bd8f5079f17b1dec6eae81ddc43c58c49b777b336fd902ffbb8e631885fbb45c 34142 bwbar_1.2.3.orig.tar.gz

Files in the pool:
  /Users/smira/.aptly/pool/13/8b/bwbar_1.2.3-2.diff.gz
  /Users/smira/.aptly/pool/cd/4f/bwbar_1.2.3-2.dsc
  /Users/smira/.aptly/pool/76/62/bwbar_1.2.3.orig.tar.gz

References to package:
  mirror [wheezy-main-src]: http://mirror.yandex.ru/debian/ wheezy [src]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>aptly repo search</title>
      <link>http://www.aptly.info/doc/aptly/repo/search</link>
      <pubDate>Fri, 29 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://www.aptly.info/doc/aptly/repo/search</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;aptly repo search&lt;/h2&gt;

&lt;p&gt;Search local repositories for packages matching query.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly repo search &amp;lt;name&amp;gt; &amp;lt;package-query&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Params are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; packages would be removed from this local repository&lt;/li&gt;
&lt;li&gt;&lt;code&gt;package-query&lt;/code&gt; is a &lt;a href=&#34;/doc/feature/query/&#34;&gt;package query&lt;/a&gt; to
search for packages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Flags:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-with-deps=false&lt;/code&gt;: include dependencies of matching packages
into search results&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly repo search internal-pkg &#39;Version (&amp;gt;= 4.5)&#39;
libtinfo5_5.9-10_i386
perl-base_5.14.2-21+deb7u1_amd64
ncurses-base_5.9-10_all
xz-utils_5.1.1alpha+20120614-2_i386
gcc-4.7-base_4.7.2-5_amd64
libtinfo5_5.9-10_amd64
base-files_7.1wheezy5_i386
ncurses-bin_5.9-10_i386
xz-utils_5.1.1alpha+20120614-2_amd64
liblzma5_5.1.1alpha+20120614-2_i386
coreutils_8.13-3.5_amd64
liblzma5_5.1.1alpha+20120614-2_amd64
libncurses5_5.9-10_amd64
coreutils_8.13-3.5_i386
libncurses5_5.9-10_i386
perl-base_5.14.2-21+deb7u1_i386
base-files_7.1wheezy5_amd64
ncurses-bin_5.9-10_amd64
gcc-4.7-base_4.7.2-5_i386
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>aptly snapshot search</title>
      <link>http://www.aptly.info/doc/aptly/snapshot/search</link>
      <pubDate>Fri, 29 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://www.aptly.info/doc/aptly/snapshot/search</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;aptly snapshot search&lt;/h2&gt;

&lt;p&gt;Search snapshot for packages matching query.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly snapshot search &amp;lt;name&amp;gt; &amp;lt;package-query&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Params are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; is snapshot name which has been given during snapshot
creation&lt;/li&gt;
&lt;li&gt;&lt;code&gt;package-query&lt;/code&gt; is a &lt;a href=&#34;/doc/feature/query/&#34;&gt;package query&lt;/a&gt; to
search for packages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Flags:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-with-deps=false&lt;/code&gt;: include dependencies of matching packages
into search results&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly snapshot search backports &#39;nginx, !Name (% *-light)&#39;
nginx_1.6.0-1~bpo70+1_all
nginx-full_1.6.0-1~bpo70+1_amd64
nginx-extras_1.6.0-1~bpo70+1_i386
nginx-extras_1.6.0-1~bpo70+1_amd64
nginx-full_1.6.0-1~bpo70+1_i386
nginx-naxsi_1.6.0-1~bpo70+1_amd64
nginx-naxsi_1.6.0-1~bpo70+1_i386
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>aptly db</title>
      <link>http://www.aptly.info/doc/aptly/db</link>
      <pubDate>Fri, 08 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://www.aptly.info/doc/aptly/db</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;aptly db&lt;/h2&gt;

&lt;p&gt;aptly db subcommands manage aptly&amp;rsquo;s internal metadata database and
package pool.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>aptly snapshot create</title>
      <link>http://www.aptly.info/doc/aptly/snapshot/create</link>
      <pubDate>Fri, 08 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://www.aptly.info/doc/aptly/snapshot/create</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;aptly snapshot create&lt;/h2&gt;

&lt;h4 id=&#34;toc_1&#34;&gt;Command &lt;code&gt;aptly snapshot create .. from mirror&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Creates snapshot from current state of remote mirror. Mirror should be
&lt;a href=&#34;/doc/aptly/mirror/update/&#34;&gt;updated&lt;/a&gt; at least once before running this command.&lt;/p&gt;

&lt;p&gt;Snapshot would contain exactly the same set of packages as mirror
currently does. Snapshot is immutable, so if mirror is updated, snapshot
contents won&amp;rsquo;t change. If mirror contains source packages, snapshot
would also contain source packages.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly snapshot create &amp;lt;name&amp;gt; from mirror &amp;lt;mirror-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Params are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; is a name for the snapshot to be created&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mirror-name&lt;/code&gt; is a mirror name (given when mirror was created)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly snapshot create monday-updates from mirror backports2

Snapshot monday-updates successfully created.
You can run &#39;aptly publish snapshot monday-updates&#39; to publish snapshot as Debian repository.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h4 id=&#34;toc_2&#34;&gt;Command &lt;code&gt;aptly snapshot create .. from repo&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Creates snapshot from current state of local package repository.
Repository should contain at least one package.&lt;/p&gt;

&lt;p&gt;Snapshot would contain exactly the same set of packages as local
repositorory currently does. Snapshot is immutable, so if local
repository is changed in any way, snapshot contents won&amp;rsquo;t change.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly snapshot create &amp;lt;name&amp;gt; from repo &amp;lt;repo-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Params are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; is a name for the snapshot to be created&lt;/li&gt;
&lt;li&gt;&lt;code&gt;repo-name&lt;/code&gt; is a local repository name&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly snapshot create snap-stable from repo stable

Snapshot snap-stable successfully created.
You can run &#39;aptly publish snapshot snap-stable&#39; to publish snapshot as Debian repository.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h4 id=&#34;toc_3&#34;&gt;Command &lt;code&gt;aptly snapshot create .. empty&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Creates empty snapshot. As snapshots are immutable, creating one empty
snapshot should be enough.&lt;/p&gt;

&lt;p&gt;Empty snapshots could be used as first argument to &lt;a href=&#34;/doc/aptly/snapshot/pull/&#34;&gt;&lt;code&gt;aptly snapshot pull&lt;/code&gt;&lt;/a&gt;
in order to create set of packages matching query, or as initial contents of empty
published repository.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly snapshot create &amp;lt;name&amp;gt; empty
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Params are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; is a name for the snapshot to be created&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly snapshot create empty-snapshot empty

Snapshot empty-snapshot successfully created.
You can run &#39;aptly publish snapshot empty-snapshot&#39; to publish snapshot as Debian repository.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>aptly repo move</title>
      <link>http://www.aptly.info/doc/aptly/repo/move</link>
      <pubDate>Fri, 08 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://www.aptly.info/doc/aptly/repo/move</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;aptly repo move&lt;/h2&gt;

&lt;p&gt;Command &lt;code&gt;move&lt;/code&gt; moves packages matching &lt;a href=&#34;/doc/feature/query/&#34;&gt;package query&lt;/a&gt;
from local repo &lt;code&gt;src-repo&lt;/code&gt; to local repo &lt;code&gt;dst-name&lt;/code&gt;. If dependency
following is enabled, aptly would try to move dependencies from
&lt;code&gt;src-name&lt;/code&gt; as well.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$  aptly repo move &amp;lt;src-name&amp;gt; &amp;lt;dst-name&amp;gt; &amp;lt;package-query&amp;gt; ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Params are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;src-name&lt;/code&gt; packages would be searched in this local repository&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dst-name&lt;/code&gt; packages would be moved to this local repository&lt;/li&gt;
&lt;li&gt;&lt;code&gt;package-query&lt;/code&gt; list of &lt;a href=&#34;/doc/feature/query/&#34;&gt;package queries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Flags:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-dry-run=false&lt;/code&gt;: don&amp;rsquo;t move, just show what would be moved&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-with-deps=false&lt;/code&gt;: follow dependencies when processing package
query&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When moving with dependencies, global dependency options are used. For
example, to move source packages, use &lt;code&gt;-dep-follow-source&lt;/code&gt;. If aptly
won&amp;rsquo;t be able to guess list of architectures from contents of local
repository &lt;code&gt;dst-name&lt;/code&gt;, architectures should be specified with
&lt;code&gt;-architectures&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly repo move stable testing percona-server-client-5.5
Loading packages...
[o] percona-server-client-5.5_5.5.35-rel33.0-611.squeeze_i386 moved
[o] percona-server-client-5.5_5.5.35-rel33.0-611.squeeze_amd64 moved
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>aptly db recover</title>
      <link>http://www.aptly.info/doc/aptly/db/recover</link>
      <pubDate>Fri, 08 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://www.aptly.info/doc/aptly/db/recover</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;aptly db recover&lt;/h2&gt;

&lt;p&gt;Database recover does its best to recover database after crash. It is
recommended to backup DB before running recover. Recover procedures
ignores all index files and tries to reconstruct them from &lt;code&gt;.sst&lt;/code&gt; files.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly db recover
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly db recover
Recovering DB...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>aptly mirror show</title>
      <link>http://www.aptly.info/doc/aptly/mirror/show</link>
      <pubDate>Fri, 08 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://www.aptly.info/doc/aptly/mirror/show</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;aptly mirror show&lt;/h2&gt;

&lt;p&gt;Shows detailed information about mirror.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly mirror show &amp;lt;name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Params are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; is a mirror name (given when mirror was created)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Flags:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-with-packages=false&lt;/code&gt;: show detailed list of packages and versions
stored in the mirror&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly mirror show backports2
Name: backports2
Archive Root URL: http://mirror.yandex.ru/backports.org/
Distribution: squeeze-backports
Components: main, contrib, non-free
Architectures: i386, amd64
Last update: 2013-12-27 19:30:19 MSK
Number of packages: 3898

Information from release file:
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In detailed information basic information about mirror is displayed:
filters by component &amp;amp; architecture, timestamp of last successful
repository fetch and number of packages.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>aptly publish snapshot</title>
      <link>http://www.aptly.info/doc/aptly/publish/snapshot</link>
      <pubDate>Fri, 08 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://www.aptly.info/doc/aptly/publish/snapshot</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;aptly publish snapshot&lt;/h2&gt;

&lt;p&gt;Publishes snapshot as repository to be consumed by &lt;code&gt;apt&lt;/code&gt;. Published
repostiories appear under &lt;code&gt;rootDir/public&lt;/code&gt; directory.
Valid &lt;a href=&#34;/doc/aptly/publish&#34;&gt;GPG key&lt;/a&gt; is required for publishing.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly publish snapshot &amp;lt;name&amp;gt; [[&amp;lt;endpoint:&amp;gt;]&amp;lt;prefix&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Params:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; is a snapshot name that snould be published&lt;/li&gt;
&lt;li&gt;&lt;code&gt;endpoint&lt;/code&gt; is an optional endpoint reference. Without endpoint,
repository would be pulished to local file system. In order to
publish to Amazon S3, use endpoint name &lt;code&gt;s3:&amp;lt;name&amp;gt;:&lt;/code&gt;, where endpoint
&lt;code&gt;name&lt;/code&gt; should configured
as S3 publishing endpoint in &lt;a href=&#34;/doc/feature/s3/&#34;&gt;configuration file&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prefix&lt;/code&gt; is an optional prefix for publishing, if not specified,
repository would be published to the root of public directory.
&lt;code&gt;prefix&lt;/code&gt; could be single directory like &lt;code&gt;ppa&lt;/code&gt; or part of the tree
like &lt;code&gt;ppa/android&lt;/code&gt;. &lt;code&gt;prefix&lt;/code&gt; shouldn&amp;rsquo;t contain &lt;code&gt;..&lt;/code&gt;, and names
&lt;code&gt;dists&lt;/code&gt; and &lt;code&gt;pool&lt;/code&gt; are not accepted. Empty &lt;code&gt;prefix&lt;/code&gt; would be
converted to &lt;code&gt;.&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Flags:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-component=&amp;quot;&amp;quot;&lt;/code&gt;: component name to publish; guessed from original
repository (if any), or defaults to &lt;code&gt;main&lt;/code&gt; (for multi-component
publishing, separate components with commas)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-distribution=&amp;quot;&amp;quot;&lt;/code&gt;: distribution name to publish; guessed from
original repository distribution&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-force-overwrite=false&lt;/code&gt;: overwrite packages files in the pool even
if content is different (see also &lt;a href=&#34;/doc/feature/duplicate/&#34;&gt;duplicate packages&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-gpg-key=&amp;quot;&amp;quot;&lt;/code&gt;: GPG key ID to use when signing the release, if not
specified default key is used&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-keyring=&amp;quot;&amp;quot;&lt;/code&gt;: GPG keyring to use (instead of default)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-label=&amp;quot;&amp;quot;&lt;/code&gt;: value for &lt;code&gt;Label:&lt;/code&gt; field&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-passphrase=&amp;quot;&amp;quot;&lt;/code&gt;: GPG passphrase to unlock private key (possibly insecure)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-passphrase-file=&amp;quot;&amp;quot;&lt;/code&gt;: GPG passphrase file to unlock private key (possibly insecure)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-origin=&amp;quot;&amp;quot;&lt;/code&gt;: value for &lt;code&gt;Origin:&lt;/code&gt; field&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-secret-keyring=&amp;quot;&amp;quot;&lt;/code&gt;: GPG secret keyring to use (instead of default)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-skip-signing=false&lt;/code&gt;: don&amp;rsquo;t sign Release files with GPG&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If architectures are limited (with config &lt;code&gt;architectures&lt;/code&gt; or option
&lt;code&gt;-architectures&lt;/code&gt;), only mentioned architectures would be published,
otherwise &lt;code&gt;aptly&lt;/code&gt; will publish all architectures in the snapshot.
When publishing &lt;code&gt;source&lt;/code&gt; is treated as separate architecture,
so if &lt;code&gt;-architectures&lt;/code&gt; flag is used, include &lt;code&gt;source&lt;/code&gt; when required.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;aptly&lt;/code&gt; would try to figure out distribution and component from snapshot
by going via snapshot source tree up to mirrors and local
repositories. If all roots report the same distribution name, it is
chosen as default. If there are different distribution names or
distribution name is not specfied, &lt;code&gt;aptly&lt;/code&gt; would display an error. For
component name the same rules apply except in case of not being able to
figure out component, aptly would use component &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It is not allowed to publish two snapshots to the same &lt;code&gt;prefix&lt;/code&gt; and
&lt;code&gt;distribution&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Empty snapshots could be published as well (as placeholder, for
subsequent updates using &lt;a href=&#34;/doc/aptly/publish/switch/&#34;&gt;aptly publish switch&lt;/a&gt;
command). When publishing empty snapshots it is important to specify
complete architectures list (using &lt;code&gt;-architectures&lt;/code&gt; flag), as it can&amp;rsquo;t
be changed after publishing.&lt;/p&gt;

&lt;p&gt;Multiple component repositories should be published from several
snapshots, one snapshot per component. In case of multiple component
publishing, command accepts several snapshot names:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly publish snapshot -component=main,contrib wheezy-main wheezy-contrib
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When mirroring remote repositories in order to preserve package split by
component, create individual mirrors for each component, take snapshots
and publish them as multi-component repository. Please see &lt;a href=&#34;/doc/feature/multi-component/&#34;&gt;multiple-component publishing&lt;/a&gt;
for more examples.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly publish snapshot back
Signing file &#39;/var/aptly/public/dists/squeeze-backports/Release&#39; with gpg, please enter your passphrase when prompted:

&amp;lt;&amp;lt;gpg asks for passphrase&amp;gt;&amp;gt;

Clearsigning file &#39;/var/aptly/public/dists/squeeze-backports/Release&#39; with gpg, please enter your passphrase when prompted:

&amp;lt;&amp;lt;gpg asks for passphrase&amp;gt;&amp;gt;

Snapshot back has been successfully published.
Please setup your webserver to serve directory &#39;/var/aptly/public&#39; with autoindexing.
Now you can add following line to apt sources:
  deb http://your-server/ squeeze-backports main
Don&#39;t forget to add your GPG key to apt with apt-key.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Directory structure for published repositories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;rootDir&amp;gt;&lt;/code&gt;: &lt;a href=&#34;/doc/configuration/&#34;&gt;configuration&lt;/a&gt; parameter, defaults to
&lt;code&gt;~/.aptly&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;public/&lt;/code&gt;: root of published tree (root for webserver)

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dists/&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;squeeze/&lt;/code&gt;: distribution name

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;main/&lt;/code&gt;: component name

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Release&lt;/code&gt;: raw file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;InRelease&lt;/code&gt;: clearsigned version&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Release.gpg&lt;/code&gt;: detached &lt;code&gt;Release&lt;/code&gt; signature&lt;/li&gt;
&lt;li&gt;&lt;code&gt;binary-i386&lt;/code&gt;: binary packages index for
architecture &lt;code&gt;i386&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Packages&lt;/code&gt;: package metadata&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Packages.gz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Packages.bz2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Release&lt;/code&gt;: used by debian-installer&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;source&lt;/code&gt;: source packages index (generated only if
source packages are available)

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Sources&lt;/code&gt;: package metadata&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Sources.gz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Sources.bz2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Release&lt;/code&gt;: used by debian-installer&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;debian-installer&lt;/code&gt;: indexes for .udeb packages
 (generated only if .udeb packages are present)

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;binary-i386&lt;/code&gt;: binary .udeb index for
 architecture &lt;code&gt;i386&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Packages&lt;/code&gt;: package index, .udeb&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Packages.gz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Packages.bz2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Release&lt;/code&gt;: used by debian-installer&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pool/&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;main/&lt;/code&gt;: component main

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;m/&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mars-invaders/&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mars-invaders_1.0.3_i386.deb&lt;/code&gt;: package file
(hard link to package from main pool)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Multi-Component Publishing</title>
      <link>http://www.aptly.info/doc/feature/multi-component</link>
      <pubDate>Fri, 08 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://www.aptly.info/doc/feature/multi-component</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Multi-Component Repository Publishing&lt;/h2&gt;

&lt;p&gt;aptly is based on a concept of package lists. Snapshots, mirrors and
local repositories are lists of packages (more precisely, lists of
references to packages). When merging, pulling, copying or moving
packages might move from one list to another. Component is a way to
break down packages into groups, usually these groups make sense only in
published repository. At the same time mapping from package to component
is not universal, there&amp;rsquo;s Debian way to group packages into &lt;code&gt;main&lt;/code&gt;,
&lt;code&gt;contrib&lt;/code&gt; and &lt;code&gt;non-free&lt;/code&gt; components, Ubuntu uses different component schema,
some 3rd party repositories use components in place of
distribution name (like &lt;code&gt;squeeze&lt;/code&gt;, &lt;code&gt;wheezy&lt;/code&gt; etc.), other use them to separate
stable and testing versions of software.&lt;/p&gt;

&lt;p&gt;In order to keep aptly simple, I&amp;rsquo;ve decided that there should be no mapping from
package to component and package lists internally aren&amp;rsquo;t split by
component. Each list (snapshot, mirror and local repository) is
mono-component (actually there&amp;rsquo;s no component at all). When publishing
repository, several lists could be published as separate components in
one published repository.&lt;/p&gt;

&lt;p&gt;By default, aptly mirrors all components from remote repository and
merges them into one &amp;ldquo;single component&amp;rdquo;. If we&amp;rsquo;d like to preserve
package split by components, individual mirrors should be created for
each component:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly mirror create wheezy-main http://ftp.ru.debian.org/debian/ wheezy main
$ aptly mirror create wheezy-contrib http://ftp.ru.debian.org/debian/ wheezy contrib
$ aptly mirror create wheezy-non-free http://ftp.ru.debian.org/debian/ wheezy non-free

# update all mirrors
$ aptly mirror list -raw | xargs -n 1 aptly mirror update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can create snapshots from each of the mirrors:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly snapshot create wheezy-main-7.5 from mirror wheezy-main
$ aptly snapshot create wheezy-contrib-7.5 from mirror wheezy-contrib
$ aptly snapshot create wheezy-non-free-7.5 from mirror wheezy-non-free
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And publish all snapshots as single repository preserving component
structure (publishing distribution &lt;code&gt;wheezy&lt;/code&gt; under prefix &lt;code&gt;upstream&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly publish snapshot -component=main,contrib,non-free -distribution=wheezy wheezy-main-7.5 wheezy-contrib-7.5 wheezy-non-free-7.5 upstream
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;aptly is smart enough to figure out component names and distribution
from the mirrors, so I can omit them (commas left to identify number of
components):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly publish snapshot -component=,, wheezy-main-7.5 wheezy-contrib-7.5 wheezy-non-free-7.5 upstream
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course we could do all regular aptly operations: merging snapshots,
pulling packages, etc.&lt;/p&gt;

&lt;p&gt;The same applies to local repositories: if packages should be published as different components,
several local repositories (one per component) should be created:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly repo create -distribution=wheezy -component=main my-soft-main
$ aptly repo create -distribution=wheezy -component=contrib my-soft-contrib
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Local repositories could be published either directly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly publish repo -component=, my-soft-main my-soft-contrib
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or via snapshot:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly snapshot create my-soft-main-1.0 from repo my-soft-main
$ aptly snapshot create my-soft-contrib-1.0 from repo my-soft-contrib

$ aptly publish snapshot -component=, my-soft-main-1.0 my-soft-contrib-1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When &lt;a href=&#34;/doc/aptly/publish/update/&#34;&gt;updating published repository&lt;/a&gt;, all component
parts are updated at the same time. When &lt;a href=&#34;/doc/aptly/publish/switch/&#34;&gt;switching published snapshots&lt;/a&gt;,
only specified components are updated.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>aptly publish update</title>
      <link>http://www.aptly.info/doc/aptly/publish/update</link>
      <pubDate>Fri, 08 Aug 2014 11:17:38 UTC</pubDate>
      <author>Andrey Smirnov</author>
      <guid>http://www.aptly.info/doc/aptly/publish/update</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;aptly publish update&lt;/h2&gt;

&lt;p&gt;Command re-publishes (updates) published local repository.
&lt;code&gt;distribution&lt;/code&gt; and &lt;code&gt;prefix&lt;/code&gt; should be occupied with local repository
published using command &lt;a href=&#34;/doc/aptly/publish/repo/&#34;&gt;&lt;code&gt;aptly publish repo&lt;/code&gt;&lt;/a&gt;.
Update happens in-place with minimum possible downtime for published
repository. Valid &lt;a href=&#34;/doc/aptly/publish/&#34;&gt;GPG key&lt;/a&gt; is required for publishing.&lt;/p&gt;

&lt;p&gt;When published repository is updated, all the options are preserved:
distribution, component, list of architectures, etc.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly publish update &amp;lt;distribution&amp;gt; [[&amp;lt;endpoint:&amp;gt;]&amp;lt;prefix&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Params:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;distribution&lt;/code&gt; is distribution name of published repository&lt;/li&gt;
&lt;li&gt;&lt;code&gt;endpoint&lt;/code&gt; is publishing endpoint, if not specified, it would
default to empty endpoint (local file system).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prefix&lt;/code&gt; is publishing prefix, if not specified, it would default to
empty prefix (&lt;code&gt;.&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Flags:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-force-overwrite=false&lt;/code&gt;: overwrite packages files in the pool even
if content is different (see also &lt;a href=&#34;/doc/feature/duplicate/&#34;&gt;duplicate packages&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-gpg-key=&amp;quot;&amp;quot;&lt;/code&gt;: GPG key ID to use when signing the release, if not
specified default key is used&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-keyring=&amp;quot;&amp;quot;&lt;/code&gt;: GPG keyring to use (instead of default)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-passphrase=&amp;quot;&amp;quot;&lt;/code&gt;: GPG passphrase to unlock private key (possibly insecure)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-passphrase-file=&amp;quot;&amp;quot;&lt;/code&gt;: GPG passphrase file to unlock private key (possibly insecure)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-secret-keyring=&amp;quot;&amp;quot;&lt;/code&gt;: GPG secret keyring to use (instead of default)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-skip-signing=false&lt;/code&gt;: don&amp;rsquo;t sign Release files with GPG&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When updating multiple-component published repository, all local
repositories are updated simultaneously.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptly publish update maverick
Loading packages...
Generating metadata files and linking package files...
Signing file &#39;/var/aptly/public/dists/maverick/Release.tmp&#39; with gpg, please enter your passphrase when prompted:

&amp;lt;&amp;lt;gpg asks for passphrase&amp;gt;&amp;gt;

Clearsigning file &#39;/var/aptly/public/dists/maverick/Release.tmp&#39; with gpg, please enter your passphrase when prompted:

&amp;lt;&amp;lt;gpg asks for passphrase&amp;gt;&amp;gt;

Cleaning up prefix &amp;quot;.&amp;quot; component &amp;quot;main&amp;quot;...

Publish for local repo ./maverick [i386, source] publishes {main: [local-repo]} has been successfully updated.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; &lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>